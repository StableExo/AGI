/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface FlashSwapInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "AAVE_POOL"
      | "SWAP_ROUTER"
      | "V3_FACTORY"
      | "WETH"
      | "executeOperation"
      | "initiateUniswapV3FlashLoan"
      | "owner"
      | "renounceOwnership"
      | "transferOwnership"
      | "uniswapV3FlashCallback"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ArbitrageExecution"
      | "FlashLoanInitiated"
      | "OwnershipTransferred"
      | "ProfitDistribution"
      | "SwapExecuted"
  ): EventFragment;

  encodeFunctionData(functionFragment: "AAVE_POOL", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "SWAP_ROUTER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "V3_FACTORY",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "WETH", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "executeOperation",
    values: [
      AddressLike[],
      AddressLike[],
      BigNumberish[],
      AddressLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "initiateUniswapV3FlashLoan",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapV3FlashCallback",
    values: [BigNumberish, BigNumberish, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "AAVE_POOL", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "SWAP_ROUTER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "V3_FACTORY", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "WETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executeOperation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initiateUniswapV3FlashLoan",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapV3FlashCallback",
    data: BytesLike
  ): Result;
}

export namespace ArbitrageExecutionEvent {
  export type InputTuple = [
    loanSource: AddressLike,
    tokenBorrowed: AddressLike,
    amountBorrowed: BigNumberish,
    feePaid: BigNumberish
  ];
  export type OutputTuple = [
    loanSource: string,
    tokenBorrowed: string,
    amountBorrowed: bigint,
    feePaid: bigint
  ];
  export interface OutputObject {
    loanSource: string;
    tokenBorrowed: string;
    amountBorrowed: bigint;
    feePaid: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FlashLoanInitiatedEvent {
  export type InputTuple = [
    loanSource: AddressLike,
    initiator: AddressLike,
    asset: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    loanSource: string,
    initiator: string,
    asset: string,
    amount: bigint
  ];
  export interface OutputObject {
    loanSource: string;
    initiator: string;
    asset: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProfitDistributionEvent {
  export type InputTuple = [
    initiator: AddressLike,
    titheRecipient: AddressLike,
    token: AddressLike,
    profitAmount: BigNumberish,
    titheAmount: BigNumberish
  ];
  export type OutputTuple = [
    initiator: string,
    titheRecipient: string,
    token: string,
    profitAmount: bigint,
    titheAmount: bigint
  ];
  export interface OutputObject {
    initiator: string;
    titheRecipient: string;
    token: string;
    profitAmount: bigint;
    titheAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SwapExecutedEvent {
  export type InputTuple = [
    dexType: BigNumberish,
    tokenIn: AddressLike,
    tokenOut: AddressLike,
    amountIn: BigNumberish,
    amountOut: BigNumberish
  ];
  export type OutputTuple = [
    dexType: bigint,
    tokenIn: string,
    tokenOut: string,
    amountIn: bigint,
    amountOut: bigint
  ];
  export interface OutputObject {
    dexType: bigint;
    tokenIn: string;
    tokenOut: string;
    amountIn: bigint;
    amountOut: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface FlashSwap extends BaseContract {
  connect(runner?: ContractRunner | null): FlashSwap;
  waitForDeployment(): Promise<this>;

  interface: FlashSwapInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  AAVE_POOL: TypedContractMethod<[], [string], "view">;

  SWAP_ROUTER: TypedContractMethod<[], [string], "view">;

  V3_FACTORY: TypedContractMethod<[], [string], "view">;

  WETH: TypedContractMethod<[], [string], "view">;

  executeOperation: TypedContractMethod<
    [
      arg0: AddressLike[],
      arg1: AddressLike[],
      arg2: BigNumberish[],
      arg3: AddressLike,
      arg4: BytesLike
    ],
    [boolean],
    "nonpayable"
  >;

  initiateUniswapV3FlashLoan: TypedContractMethod<
    [
      _pool: AddressLike,
      _token: AddressLike,
      _amount: BigNumberish,
      _data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  uniswapV3FlashCallback: TypedContractMethod<
    [fee0: BigNumberish, fee1: BigNumberish, data: BytesLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "AAVE_POOL"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "SWAP_ROUTER"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "V3_FACTORY"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "WETH"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "executeOperation"
  ): TypedContractMethod<
    [
      arg0: AddressLike[],
      arg1: AddressLike[],
      arg2: BigNumberish[],
      arg3: AddressLike,
      arg4: BytesLike
    ],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "initiateUniswapV3FlashLoan"
  ): TypedContractMethod<
    [
      _pool: AddressLike,
      _token: AddressLike,
      _amount: BigNumberish,
      _data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "uniswapV3FlashCallback"
  ): TypedContractMethod<
    [fee0: BigNumberish, fee1: BigNumberish, data: BytesLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "ArbitrageExecution"
  ): TypedContractEvent<
    ArbitrageExecutionEvent.InputTuple,
    ArbitrageExecutionEvent.OutputTuple,
    ArbitrageExecutionEvent.OutputObject
  >;
  getEvent(
    key: "FlashLoanInitiated"
  ): TypedContractEvent<
    FlashLoanInitiatedEvent.InputTuple,
    FlashLoanInitiatedEvent.OutputTuple,
    FlashLoanInitiatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "ProfitDistribution"
  ): TypedContractEvent<
    ProfitDistributionEvent.InputTuple,
    ProfitDistributionEvent.OutputTuple,
    ProfitDistributionEvent.OutputObject
  >;
  getEvent(
    key: "SwapExecuted"
  ): TypedContractEvent<
    SwapExecutedEvent.InputTuple,
    SwapExecutedEvent.OutputTuple,
    SwapExecutedEvent.OutputObject
  >;

  filters: {
    "ArbitrageExecution(address,address,uint256,uint256)": TypedContractEvent<
      ArbitrageExecutionEvent.InputTuple,
      ArbitrageExecutionEvent.OutputTuple,
      ArbitrageExecutionEvent.OutputObject
    >;
    ArbitrageExecution: TypedContractEvent<
      ArbitrageExecutionEvent.InputTuple,
      ArbitrageExecutionEvent.OutputTuple,
      ArbitrageExecutionEvent.OutputObject
    >;

    "FlashLoanInitiated(address,address,address,uint256)": TypedContractEvent<
      FlashLoanInitiatedEvent.InputTuple,
      FlashLoanInitiatedEvent.OutputTuple,
      FlashLoanInitiatedEvent.OutputObject
    >;
    FlashLoanInitiated: TypedContractEvent<
      FlashLoanInitiatedEvent.InputTuple,
      FlashLoanInitiatedEvent.OutputTuple,
      FlashLoanInitiatedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "ProfitDistribution(address,address,address,uint256,uint256)": TypedContractEvent<
      ProfitDistributionEvent.InputTuple,
      ProfitDistributionEvent.OutputTuple,
      ProfitDistributionEvent.OutputObject
    >;
    ProfitDistribution: TypedContractEvent<
      ProfitDistributionEvent.InputTuple,
      ProfitDistributionEvent.OutputTuple,
      ProfitDistributionEvent.OutputObject
    >;

    "SwapExecuted(uint8,address,address,uint256,uint256)": TypedContractEvent<
      SwapExecutedEvent.InputTuple,
      SwapExecutedEvent.OutputTuple,
      SwapExecutedEvent.OutputObject
    >;
    SwapExecuted: TypedContractEvent<
      SwapExecutedEvent.InputTuple,
      SwapExecutedEvent.OutputTuple,
      SwapExecutedEvent.OutputObject
    >;
  };
}
